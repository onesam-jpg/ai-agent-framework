name: Deploy to Supabase & Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: read
  deployments: write

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Link Supabase Project
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          npx supabase link --project-ref $SUPABASE_PROJECT_REF

      - name: Run Database Migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Running database migrations..."
          npx supabase db push

      - name: Deploy Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          if [ -d "supabase/functions" ]; then
            echo "Deploying Edge Functions..."
            npx supabase functions deploy
          else
            echo "No Edge Functions found - skipping"
          fi

      - name: Generate TypeScript Types
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          mkdir -p types
          npx supabase gen types typescript --linked > types/supabase.ts
          echo "‚úÖ Database types generated"

      - name: Commit Generated Types
        run: |
          git config user.name "Supabase Deploy Bot"
          git config user.email "deploy@github-actions"
          git add types/supabase.ts
          git diff --staged --quiet || git commit -m "chore: update Supabase types [skip ci]"
          git push || echo "No changes to commit"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-database
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test || echo "No tests configured"

      - name: Build Application
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        if: env.VERCEL_TOKEN != ''
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Deploy to Netlify (Alternative)
        uses: nwtgck/actions-netlify@v3.0
        if: env.NETLIFY_AUTH_TOKEN != '' && env.VERCEL_TOKEN == ''
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        with:
          publish-dir: './out'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment Complete!"
          echo "Database migrations applied"
          echo "Edge Functions deployed"
          echo "Frontend deployed to production"

  notify-completion:
    runs-on: ubuntu-latest
    needs: [deploy-database, deploy-frontend]
    if: always()

    steps:
      - name: Create Deployment Summary
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.deploy-database.result }}' === 'success' &&
                          '${{ needs.deploy-frontend.result }}' === 'success' ? 'success' : 'failure';

            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const message = status === 'success'
              ? 'Deployment completed successfully!'
              : 'Deployment failed. Check logs for details.';

            core.summary
              .addHeading(`${emoji} Deployment ${status === 'success' ? 'Successful' : 'Failed'}`)
              .addRaw(message)
              .addTable([
                [{data: 'Component', header: true}, {data: 'Status', header: true}],
                ['Database Migrations', '${{ needs.deploy-database.result }}'],
                ['Frontend Deployment', '${{ needs.deploy-frontend.result }}']
              ])
              .write();

            // Find related issue if this was from an agent workflow
            const commit = context.payload.head_commit;
            if (commit && commit.message) {
              const issueMatch = commit.message.match(/#(\d+)/);
              if (issueMatch) {
                const issueNumber = issueMatch[1];
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: '## ' + emoji + ' Deployment ' + (status === 'success' ? 'Complete' : 'Failed') + '\n\n' +
                    '**Status**: ' + message + '\n\n' +
                    '**Deployed Components**:\n' +
                    '- Database: ' + (status === 'success' ? '‚úÖ Updated' : '‚ùå Failed') + '\n' +
                    '- Frontend: ' + (status === 'success' ? '‚úÖ Live' : '‚ùå Failed') + '\n\n' +
                    (status === 'success' ? 'üéâ Your changes are now live in production!' : '‚ö†Ô∏è Please check the deployment logs and fix any issues.') + '\n\n' +
                    '---\n' +
                    '*Automated deployment by GitHub Actions*'
                });
              }
            }
